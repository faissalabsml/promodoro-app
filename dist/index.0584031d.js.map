{"mappings":"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","sources":["src/js/progressRingView.js","src/js/countdown.js","src/js/settingsPopupView.js","src/js/settingsPopup.js","src/js/state.js","src/js/optionsView.js"],"sourcesContent":["import { state } from \"./state.js\";\n\nconst path = document.querySelector(\".timer__progress--path\");\nconst length = path.getTotalLength();\n\n// Set up the starting positions\npath.style.strokeDasharray = length + \" \" + length;\npath.style.strokeDashoffset = length;\n\npath.getBoundingClientRect();\n\n// Define our transition\npath.style.transition = path.style.WebkitTransition =\n  \"stroke-dashoffset 1s ease-in-out\";\n\nexport const updateProgressRing = function (running = true) {\n  if (!running) path.style.strokeDashoffset = length;\n\n  if (running)\n    path.style.strokeDashoffset =\n      (state.currentTimer * length) / state[state.currentInterval];\n};\n","import { state } from \"./state.js\";\nimport { moveBackground } from \"./optionsView.js\";\nimport { updateProgressRing } from \"./progressRingView.js\";\n\n// Get the time from the DOM\nexport const timer = document.querySelector(\".timer__text > h1\");\nexport const totalWorkTime = document.querySelector(\".work-time\");\nconst nextSession = document.querySelector(\".next-session\");\nexport const controlBtn = document.querySelector(\".control\");\nexport const resetBtn = document.querySelector(\".reset\");\n\n// Declaring the interval\nlet countdown;\n\n// Start countdown function\nconst startCountdown = function () {\n  // Get the timer displayed on the IU and save it in the state object (in seconds)\n  state.currentTimer =\n    +timer.textContent.split(\":\")[0] * 60 + +timer.textContent.split(\":\")[1];\n\n  state.isRunning = true;\n\n  countdown = setInterval(updateCountdown, 1000);\n};\n\n// Update the timer on the UI\nconst updateCountdown = function () {\n  // Update the timer in state object\n  state.currentTimer--;\n\n  // Check if the timer is finished\n  if (state.currentTimer < 0) {\n    stopCountdown();\n    nextTimer();\n    updateProgressRing(false);\n    return;\n  }\n\n  // Display the running timer on the UI\n  displayTimer(state.currentTimer);\n\n  // Update progress ring\n  updateProgressRing();\n};\n\n// Start the next timer (According to the promodoro technique: You do 4 pomodoros/intervals separated by 5 min breaks. After that, you take a longer break of about 15 to 20 minutes)\nconst nextTimer = function () {\n  // Check the current interval/timer and change it to the next interval\n  switch (state.currentInterval) {\n    case \"promodoro\":\n      state.promodoroCount++;\n      state.totalWorkTime += state.promodoro;\n      state.currentInterval = \"shortBreak\";\n\n      displayTotalWorkTime(state.totalWorkTime);\n      nextSession.textContent = \"promodoro\";\n\n      break;\n\n    case \"shortBreak\":\n      state.currentInterval = \"promodoro\";\n\n      nextSession.textContent = \"short break\";\n      break;\n\n    case \"longBreak\":\n      state.currentInterval = \"promodoro\";\n\n      nextSession.textContent = \"short break\";\n\n      state.promodoroCount = 0;\n      break;\n  }\n\n  if (state.currentInterval === \"promodoro\" && state.promodoroCount === 3)\n    nextSession.textContent = \"long break\";\n  if (state.promodoroCount === 4) state.currentInterval = \"longBreak\";\n\n  localStorage.setItem(\"state\", JSON.stringify(state));\n\n  // Get the current timer's label on the HTML and move bg\n  const nextOption = document.querySelector(`#${state.currentInterval}`);\n  moveBackground(null, nextOption);\n\n  // Display and start the next timer about to start\n  displayTimer(state[state.currentInterval]);\n  startCountdown();\n};\n\n// Handle countdown on click event or when pressing the space key\nconst controlCountdown = function () {\n  if (controlBtn.textContent == \"start\" || controlBtn.textContent == \"resume\") {\n    startCountdown();\n    controlBtn.textContent = \"pause\";\n    resetBtn.classList.remove(\"active\");\n    return;\n  }\n  if (controlBtn.textContent == \"pause\") {\n    stopCountdown();\n    controlBtn.textContent = \"resume\";\n    resetBtn.classList.add(\"active\");\n  }\n};\n\n// Stop the countdown interval\nexport const stopCountdown = function () {\n  state.isRunning = false;\n  clearInterval(countdown);\n};\n\n// Transfer the seconds into minutes and seconds and display the result\nexport const displayTimer = function (sec) {\n  let minutes = Math.floor(sec / 60);\n  let seconds = sec % 60;\n\n  minutes = minutes < 10 ? `0${minutes}` : minutes;\n  seconds = seconds < 10 ? `0${seconds}` : seconds;\n\n  timer.textContent = document.title = `${minutes}:${seconds}`;\n};\n\nexport const displayTotalWorkTime = function (sec) {\n  let hours = Math.floor(sec / 3600);\n  let minutes = Math.floor((sec % 3600) / 60);\n  let seconds = Math.floor((sec % 3600) % 60);\n\n  hours = hours < 10 ? `0${hours}` : hours;\n  minutes = minutes < 10 ? `0${minutes}` : minutes;\n  seconds = seconds < 10 ? `0${seconds}` : seconds;\n\n  totalWorkTime.textContent =\n    document.title = `${hours}:${minutes}:${seconds} ${\n      hours == 0 ? \"min\" : hours == 1 ? \"hour\" : \"hours\"\n    }`;\n};\n\n// Reset\nexport const resetTimer = function () {\n  const defaultOption = document.querySelector(\"#promodoro\");\n\n  state.isRunning = false;\n  state.currentInterval = \"promodoro\";\n  state.promodoroCount = 0;\n  state.totalWorkTime = 0;\n\n  localStorage.setItem(\"state\", JSON.stringify(state));\n\n  resetBtn.classList.remove(\"active\");\n  controlBtn.textContent = \"start\";\n  displayTimer(state.promodoro);\n  displayTotalWorkTime(state.totalWorkTime);\n  moveBackground(null, defaultOption);\n  updateProgressRing(false);\n};\n\n// Event listeners\ncontrolBtn.addEventListener(\"click\", controlCountdown);\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.keyCode !== 32) return;\n  controlCountdown();\n});\n\n// Reset timers\nresetBtn.addEventListener(\"click\", resetTimer);\n","import { controlBtn, resetBtn, stopCountdown } from \"./countdown.js\";\nimport { state } from \"./state.js\";\n\nconst openSettingsBtn = document.querySelector(\".settings-btn\");\nconst closeSettingsBtn = document.querySelector(\".close-btn *\");\nconst settingsContainer = document.querySelector(\".settings-container\");\nconst inputs = settingsContainer.querySelectorAll(\n  \"input[type='number'], input[type='radio']\"\n);\nconst inputArrows = document.querySelectorAll(\".form__inputs--arrows > *\");\n\nconst openSettings = function () {\n  settingsContainer.classList.add(\"active\");\n  stopCountdown();\n};\n\nexport const closeSettings = function () {\n  settingsContainer.classList.remove(\"active\");\n};\n\n// Change input's value using svg arrows\nconst changeValue = function (e) {\n  // Get the input containing the clicked arrows\n  const input = e.target.closest(\n    \".form__inputs--arrows\"\n  ).previousElementSibling;\n\n  // Get the arrow rule (increase or decrease value)\n  const role = e.target.closest(\"svg\").dataset.role;\n\n  // Using stepUp method to change input value\n  role === \"increase\" ? input.stepUp() : input.stepDown();\n};\n\n// Arrow event listener\ninputArrows.forEach((el) =>\n  el.addEventListener(\"click\", (e) => {\n    changeValue(e);\n  })\n);\n\n// To prevent text selection when clicking multiple times on the arrows\ninputArrows.forEach((el) =>\n  el.addEventListener(\"mousedown\", (e) => e.preventDefault(), false)\n);\n\nconst previousSettings = function () {\n  settingsContainer.querySelector(\n    `input[value='${state.font}']`\n  ).checked = true;\n  settingsContainer.querySelector(\n    `input[value='${state.accentColor}']`\n  ).checked = true;\n\n  settingsContainer\n    .querySelectorAll(\"input[type='number']\")\n    .forEach((input) => {\n      input.value = state[input.id] / 60;\n    });\n};\n\n// Open settings popup\nopenSettingsBtn.addEventListener(\"click\", () => {\n  openSettings();\n  previousSettings();\n});\n\n// Close settings\n[settingsContainer, closeSettingsBtn].forEach((el) =>\n  el.addEventListener(\"click\", (e) => {\n    if (e.target === settingsContainer || e.target.closest(\".close-btn\")) {\n      if (controlBtn.textContent !== \"start\") {\n        controlBtn.textContent = \"resume\";\n        resetBtn.classList.add(\"active\");\n      }\n\n      closeSettings();\n    }\n  })\n);\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.keyCode !== 27) return;\n  closeSettings();\n});\n","import { state, root } from \"./state.js\";\nimport { controlBtn, resetBtn, displayTimer, resetTimer } from \"./countdown.js\";\nimport { closeSettings } from \"./settingsPopupView.js\";\nimport { updateProgressRing } from \"./progressRingView.js\";\n\nconst settingsForm = document.querySelector(\".form\");\nconst applyBtn = document.querySelector(\".form__btn\");\n\nexport const updateUISettings = function () {\n  root.style.setProperty(\"--accent-color\", state.colors[state.accentColor]);\n  root.style.setProperty(\"--font\", state.font);\n};\n\nconst applySettings = function () {\n  const inputs = settingsForm.querySelectorAll(\n    \"input[type='number'], input[type='radio']:checked\"\n  );\n\n  inputs.forEach((input) => {\n    const key = input.dataset.change;\n    const value = input.value;\n\n    key === \"font\" || key === \"accentColor\"\n      ? (state[key] = value)\n      : (state[key] = value * 60);\n  });\n\n  if (controlBtn.textContent !== \"start\") {\n    controlBtn.textContent = \"resume\";\n    resetBtn.classList.add(\"active\");\n  } else {\n    displayTimer(state[state.currentInterval]);\n  }\n\n  updateUISettings();\n  closeSettings();\n\n  localStorage.setItem(\"state\", JSON.stringify(state));\n};\n\napplyBtn.addEventListener(\"click\", applySettings);\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.keyCode !== 13) return;\n  applySettings();\n});\n","import {\n  timer,\n  displayTimer,\n  totalWorkTime,\n  displayTotalWorkTime,\n} from \"./countdown\";\nimport { moveBackground } from \"./optionsView\";\nimport { updateProgressRing } from \"./progressRingView\";\nimport { updateUISettings } from \"./settingsPopup\";\n\nexport let state = {\n  // All times in seconds\n  promodoro: 1500,\n  shortBreak: 300,\n  longBreak: 1200,\n  currentInterval: \"promodoro\",\n  currentTimer: 0,\n  promodoroCount: 0,\n  totalWorkTime: 0,\n  isRunning: false,\n  font: \"kumbh sans\",\n  accentColor: \"salmon\",\n  colors: {\n    salmon: \"#f87272\",\n    cyan: \"#72f4f8\",\n    violet: \"#d882f8\",\n  },\n};\n\nconst currentOption = document.querySelector(`#${state.currentInterval}`);\nexport const root = document.documentElement;\n\nconst init = function () {\n  const storage = localStorage.getItem(\"state\");\n  if (storage) state = JSON.parse(storage);\n\n  state.promodoroCount = 0;\n\n  updateUISettings();\n  moveBackground(null, currentOption);\n  displayTimer(state[state.currentInterval]);\n  displayTotalWorkTime(state.totalWorkTime);\n  document.title = \"promodoro\";\n};\n\nwindow.addEventListener(\"load\", init);\n","import { state } from \"./state.js\";\nimport {\n  timer,\n  controlBtn,\n  resetBtn,\n  stopCountdown,\n  displayTimer,\n} from \"./countdown.js\";\nimport { updateProgressRing } from \"./progressRingView.js\";\n\nconst options = document.querySelectorAll(\".option__label\");\nconst background = document.querySelector(\".option__background\");\n\n// Move the background behind the checked option\nexport const moveBackground = function (e, target) {\n  let input;\n\n  if (e) {\n    target = e.target.closest(\".option\");\n    input = e.target.previousElementSibling;\n  } else {\n    input = target;\n    target = target.closest(\".option\");\n  }\n\n  // Set the input to checked\n  input.checked = true;\n\n  // Get the distance (left) between the label and the parent element using offsetLeft\n  background.style.left = target.offsetLeft + \"px\";\n\n  // Set the current selected interval\n  state.currentInterval = target.querySelector(\"input\").id;\n};\n\n// Get the timer from the state object and display it on click\nconst updateTimer = function (e) {\n  const option = e.target.getAttribute(\"for\");\n\n  stopCountdown();\n\n  displayTimer(state[option]);\n  controlBtn.textContent = \"start\";\n};\n\n// Move background and change timer on click\noptions.forEach((option) =>\n  option.addEventListener(\"click\", (e) => {\n    moveBackground(e);\n    updateTimer(e);\n    updateProgressRing(false);\n\n    resetBtn.classList.remove(\"active\");\n\n    localStorage.setItem(\"state\", JSON.stringify(state));\n  })\n);\n"],"names":["$cd19bebf52927390$var$path","document","querySelector","$cd19bebf52927390$var$length","getTotalLength","style","strokeDasharray","strokeDashoffset","getBoundingClientRect","transition","WebkitTransition","$cd19bebf52927390$export$d23c56d8825bc2a0","running","$5b7f15d58bca2384$export$c837a8b98c265ae3","currentTimer","currentInterval","$e4d34a0d6c265ad7$export$c86c1c59c7b53443","$e4d34a0d6c265ad7$export$ad842af59fa7db90","$e4d34a0d6c265ad7$var$nextSession","$e4d34a0d6c265ad7$export$9457ef5fe68d9bc2","$e4d34a0d6c265ad7$export$7cd4343fa518bd24","$e4d34a0d6c265ad7$var$countdown","$e4d34a0d6c265ad7$var$startCountdown","textContent","split","isRunning","setInterval","$e4d34a0d6c265ad7$var$updateCountdown","$e4d34a0d6c265ad7$export$a176a9817423a552","$e4d34a0d6c265ad7$var$nextTimer","$e4d34a0d6c265ad7$export$c9b07fad212c6704","promodoroCount","totalWorkTime","promodoro","$e4d34a0d6c265ad7$export$a35115f78f2a3751","localStorage","setItem","JSON","stringify","nextOption","$fb71c30d475fff6d$export$80135c6a423f3f2f","$e4d34a0d6c265ad7$var$controlCountdown","classList","remove","add","clearInterval","sec","minutes","Math","floor","seconds","title","hours","addEventListener","e","keyCode","defaultOption","$803cda43eaf9a7e2$var$openSettingsBtn","$803cda43eaf9a7e2$var$closeSettingsBtn","$803cda43eaf9a7e2$var$settingsContainer","$803cda43eaf9a7e2$var$inputArrows","querySelectorAll","$803cda43eaf9a7e2$export$ea9d85bbd855c1a7","forEach","el","input","target","closest","previousElementSibling","dataset","role","stepUp","stepDown","$803cda43eaf9a7e2$var$changeValue","preventDefault","font","checked","accentColor","value","id","$33fba0b15ef7cbf2$var$settingsForm","$33fba0b15ef7cbf2$var$applyBtn","$33fba0b15ef7cbf2$export$c1b6afe354745bee","$5b7f15d58bca2384$export$d6ad342418d35c97","setProperty","colors","$33fba0b15ef7cbf2$var$applySettings","key","change","shortBreak","longBreak","salmon","cyan","violet","$5b7f15d58bca2384$var$currentOption","documentElement","window","storage","getItem","parse","$fb71c30d475fff6d$var$options","$fb71c30d475fff6d$var$background","left","offsetLeft","option","getAttribute","$fb71c30d475fff6d$var$updateTimer"],"version":3,"file":"index.0584031d.js.map"}